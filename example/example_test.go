//go:generate tests-generator --specs-file ./specs.yaml --pkg example --handler-func NewRouter
package example

// Code generated by tests-generator DO NOT EDIT.

import (
	"bytes"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"
)

var h http.Handler = NewRouter()


func TestGetAllTodos1(t *testing.T) {
	var reqBody io.Reader
	if `` != "" {
		reqBody =  bytes.NewBuffer([]byte(``))
	}

	respRec := httptest.NewRecorder()
	req, err := http.NewRequest("GET", "/todos", reqBody)
	if err != nil {
		t.Fatal("Creating 'GET /todos' request failed!")
	}

	h.ServeHTTP(respRec, req)

	assert.Equal(t, respRec.Code, 200, "GetAllTodos1: unexpected response code")

	b, err := ioutil.ReadAll(respRec.Body)
	assert.NoError(t, err)

	if string(b) != "" || `[{ "name": "My First todo", "isFinished": false }]` != "" {
		assert.JSONEq(t, `[{ "name": "My First todo", "isFinished": false }]`, string(b), "the response body doesn't match the expected one")
	}
}

func TestAddTodo1(t *testing.T) {
	var reqBody io.Reader
	if `{"name": "second todo"}` != "" {
		reqBody =  bytes.NewBuffer([]byte(`{"name": "second todo"}`))
	}

	respRec := httptest.NewRecorder()
	req, err := http.NewRequest("POST", "/todos", reqBody)
	if err != nil {
		t.Fatal("Creating 'POST /todos' request failed!")
	}

	h.ServeHTTP(respRec, req)

	assert.Equal(t, respRec.Code, 201, "AddTodo1: unexpected response code")

	b, err := ioutil.ReadAll(respRec.Body)
	assert.NoError(t, err)

	if string(b) != "" || `{ "name": "second todo", "isFinished": false }` != "" {
		assert.JSONEq(t, `{ "name": "second todo", "isFinished": false }`, string(b), "the response body doesn't match the expected one")
	}
}

func TestGetAllTodos2(t *testing.T) {
	var reqBody io.Reader
	if `` != "" {
		reqBody =  bytes.NewBuffer([]byte(``))
	}

	respRec := httptest.NewRecorder()
	req, err := http.NewRequest("GET", "/todos", reqBody)
	if err != nil {
		t.Fatal("Creating 'GET /todos' request failed!")
	}

	h.ServeHTTP(respRec, req)

	assert.Equal(t, respRec.Code, 200, "GetAllTodos2: unexpected response code")

	b, err := ioutil.ReadAll(respRec.Body)
	assert.NoError(t, err)

	if string(b) != "" || `[{ "name": "My First todo", "isFinished": false }, { "name": "second todo", "isFinished": false }]` != "" {
		assert.JSONEq(t, `[{ "name": "My First todo", "isFinished": false }, { "name": "second todo", "isFinished": false }]`, string(b), "the response body doesn't match the expected one")
	}
}

func TestGetFirstTodo(t *testing.T) {
	var reqBody io.Reader
	if `` != "" {
		reqBody =  bytes.NewBuffer([]byte(``))
	}

	respRec := httptest.NewRecorder()
	req, err := http.NewRequest("GET", "/todos/0", reqBody)
	if err != nil {
		t.Fatal("Creating 'GET /todos/0' request failed!")
	}

	h.ServeHTTP(respRec, req)

	assert.Equal(t, respRec.Code, 200, "GetFirstTodo: unexpected response code")

	b, err := ioutil.ReadAll(respRec.Body)
	assert.NoError(t, err)

	if string(b) != "" || `{ "name": "My First todo", "isFinished": false }` != "" {
		assert.JSONEq(t, `{ "name": "My First todo", "isFinished": false }`, string(b), "the response body doesn't match the expected one")
	}
}

func TestGetUnknownTodo(t *testing.T) {
	var reqBody io.Reader
	if `` != "" {
		reqBody =  bytes.NewBuffer([]byte(``))
	}

	respRec := httptest.NewRecorder()
	req, err := http.NewRequest("GET", "/todos/42", reqBody)
	if err != nil {
		t.Fatal("Creating 'GET /todos/42' request failed!")
	}

	h.ServeHTTP(respRec, req)

	assert.Equal(t, respRec.Code, 404, "GetUnknownTodo: unexpected response code")

	b, err := ioutil.ReadAll(respRec.Body)
	assert.NoError(t, err)

	if string(b) != "" || `` != "" {
		assert.JSONEq(t, ``, string(b), "the response body doesn't match the expected one")
	}
}

func TestGetOneTodoWrongParams(t *testing.T) {
	var reqBody io.Reader
	if `` != "" {
		reqBody =  bytes.NewBuffer([]byte(``))
	}

	respRec := httptest.NewRecorder()
	req, err := http.NewRequest("GET", "/todos/fdsd", reqBody)
	if err != nil {
		t.Fatal("Creating 'GET /todos/fdsd' request failed!")
	}

	h.ServeHTTP(respRec, req)

	assert.Equal(t, respRec.Code, 400, "GetOneTodoWrongParams: unexpected response code")

	b, err := ioutil.ReadAll(respRec.Body)
	assert.NoError(t, err)

	if string(b) != "" || `` != "" {
		assert.JSONEq(t, ``, string(b), "the response body doesn't match the expected one")
	}
}

