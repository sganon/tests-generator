package {{.Pkg}}

// This file was generated via test-generator

import (
	"bytes"
	"io"
	"net/http"
	"net/http/httptest"
	"regexp"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/tdewolff/minify"
	"github.com/tdewolff/minify/json"
)

var h http.Handler = {{.HandlerFunc}}()

{{range .Suite}}
func Test{{.Name}}(t *testing.T) {
	var reqBody io.Reader
	if `{{.Body}}` != "" {
		reqBody =  bytes.NewBuffer([]byte(`{{.Body}}`))
	}

	respRec := httptest.NewRecorder()
	req, err := http.NewRequest("{{.Method}}", "{{.Path}}{{.Query}}", reqBody)
	if err != nil {
		t.Fatal("Creating '{{.Method}} {{.Path}}' request failed!")
	}

	h.ServeHTTP(respRec, req)

	assert.Equal(t, respRec.Code, {{.Response.Status}}, "{{.Name}}: unexpected response code")
	
	body := new(bytes.Buffer)
	ref := new(bytes.Buffer)
	m := minify.New()
	m.AddFuncRegexp(regexp.MustCompile("[/+]json$"), json.Minify)
	if err := m.Minify("application/json", body, respRec.Body); err != nil {
		panic(err)
	}
	if err := m.Minify("application/json", ref, bytes.NewBuffer([]byte(`{{.Response.Body}}`))); err != nil {
		panic(err)
	}



	assert.Equal(t, body, ref, "{{.Name}}: response body is not matching")
}
{{end}}
